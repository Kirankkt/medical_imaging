import os
import requests
from PIL import Image
import streamlit as st

# Function to perform Google Custom Search
def google_custom_search(query, api_key, cse_id, num_results=3):
    search_url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "q": query,
        "key": api_key,
        "cx": cse_id,
        "num": num_results
    }
    response = requests.get(search_url, params=params)
    response.raise_for_status()  # Raises HTTPError for bad responses
    search_results = response.json()
    return search_results.get("items", [])

# Streamlit app configuration
if "GEMINI_API_KEY" not in st.session_state:
    st.session_state.GEMINI_API_KEY = None

with st.sidebar:
    st.title("‚ÑπÔ∏è Configuration")

    if not st.session_state.GEMINI_API_KEY:
        api_key = st.text_input(
            "Enter your Gemini API Key:",
            type="password"
        )
        st.caption(
            "Get your API key from [Google AI Studio](https://aistudio.google.com/apikey) üîë"
        )
        if api_key:
            st.session_state.GEMINI_API_KEY = api_key
            st.success("API Key saved!")
            st.experimental_rerun()
    else:
        st.success("API Key is configured")
        if st.button("üîÑ Reset API Key"):
            st.session_state.GEMINI_API_KEY = None
            st.experimental_rerun()

    if "GOOGLE_API_KEY" not in st.secrets or "CUSTOM_SEARCH_ENGINE_ID" not in st.secrets:
        st.error("Please add your Google API Key and Custom Search Engine ID to the secrets.")

    st.info(
        "This tool provides AI-powered analysis of medical imaging data using "
        "advanced computer vision and radiological expertise."
    )
    st.warning(
        "‚ö†DISCLAIMER: This tool is for educational and informational purposes only. "
        "All analyses should be reviewed by qualified healthcare professionals. "
        "Do not make medical decisions based solely on this analysis."
    )

# Check if API keys and CSE ID are available
if not st.session_state.GEMINI_API_KEY or "GOOGLE_API_KEY" not in st.secrets or "CUSTOM_SEARCH_ENGINE_ID" not in st.secrets:
    st.warning("Please configure your API keys and Custom Search Engine ID in the sidebar to continue.")
else:
    st.title("üè• Medical Imaging Diagnosis Agent")
    st.write("Upload a medical image for professional analysis")

    # Create containers for better organization
    upload_container = st.container()
    image_container = st.container()
    analysis_container = st.container()

    with upload_container:
        uploaded_file = st.file_uploader(
            "Upload Medical Image",
            type=["jpg", "jpeg", "png", "dicom"],
            help="Supported formats: JPG, JPEG, PNG, DICOM"
        )

    if uploaded_file is not None:
        with image_container:
            # Center the image using columns
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                image = Image.open(uploaded_file)
                # Calculate aspect ratio for resizing
                width, height = image.size
                aspect_ratio = width / height
                new_width = 500
                new_height = int(new_width / aspect_ratio)
                resized_image = image.resize((new_width, new_height))

                st.image(
                    resized_image,
                    caption="Uploaded Medical Image",
                    use_column_width=True
                )

                analyze_button = st.button(
                    "üîç Analyze Image",
                    type="primary",
                    use_container_width=True
                )

        with analysis_container:
            if analyze_button:
                image_path = "temp_medical_image.png"
                with open(image_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())

                with st.spinner("üîÑ Analyzing image... Please wait."):
                    try:
                        # Placeholder for image analysis logic
                        # Replace this with actual image analysis code
                        st.markdown("### üìã Analysis Results")
                        st.markdown("---")
                        st.markdown("**Image analysis is not implemented in this example.**")
                        st.markdown("---")
                        st.caption(
                            "Note: This analysis is generated by AI and should be reviewed by "
                            "a qualified healthcare professional."
                        )

                        # Example usage of the custom search function
                        search_query = "Recent medical literature on MRI brain scan abnormalities"
                        search_results = google_custom_search(
                            search_query,
                            api_key=st.secrets["GOOGLE_API_KEY"],
                            cse_id=st.secrets["CUSTOM_SEARCH_ENGINE_ID"]
                        )

                        st.markdown("### üîó Relevant Medical Literature")
                        for result in search_results:
                            st.markdown(f"**[{result['title']}]({result['link']})**")
                            st.write(result['snippet'])
                            st.markdown("---")

                    except Exception as e:
                        st.error(f"Analysis error: {e}")
                    finally:
                        if os.path.exists(image_path):
                            os.remove(image_path)
    else:
        st.info("üëÜ Please upload a medical image to begin analysis.")
